
@model IEnumerable<technical_assessment.Models.RecyclableItems>

@{
    ViewBag.Title = "Index";
}
<h1 class="mt-3" id="recyclables">Recyclable Items</h1>
<div class="d-flex justify-content-start col-5"><input type="text" onkeyup="getData()" class="form-control" name="type_name" id="search" required placeholder="Search ..."></div>
<div class="d-flex justify-content-end"><button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addRecyclableItem" onclick="getRecyclablesData()"> Add</button></div>
<table class="table table-responsive">
    <thead class="thead-dark">
        <tr>
            <th>#</th>
            <th>Type</th>
            <th>Rate</th>
            <th>Weight</th>
            <th>Computed Rate</th>
            <th>Item Description</th>
            <th class="text-center">Action</th>
        </tr>
    </thead>
    <tbody id="table_data">
    </tbody>
</table>
<div class="col-2" id="pagination_label">
    showing: 1-10 of 100
</div>
<div class="d-flex justify-content-center gap-2">
    <button class="btn btn-outline-primary" onclick="prevPage()" id="prev_page"> Prev</button>
    <button class="btn btn-outline-primary" onclick="nextPage()" id="next_page"> Next</button>
</div>

<div>
    <div class="modal fade" id="addRecyclableItem" tabindex="-1" aria-labelledby="addRecyclablesLabel" aria-hidden="true">
        <form action="/" id="createRecyclableItemForm" method="post">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="addRecyclablesLabel">Add Recyclable Item</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div class="mb-3">
                            <label for="type_name" class="form-label">Search Recyclable type </label>
                            <input type="text" class="form-control" name="type_name" id="type_name" onkeyup="getRecyclablesData()" placeholder="Search type name ...">
                        </div>
                        <div class="mb-3">
                            <label for="recyclable_type_id" class="form-label">Recyclable type <span class="text-danger">*</span></label>
                            <select class="form-control" name="recyclable_type_id" onchange="calculateRate()" id="recyclable_type_id">
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="item_description" class="form-label">Description <span class="text-danger">*</span></label>
                            <textarea type="text" rows="3" class="form-control" name="item_description" id="item_description" required placeholder="Enter description "></textarea>
                        </div>
                        <div class="mb-3">
                            <label for="computed_rate" class="form-label">Computed Rate</label>
                            <input type="text" class="form-control" name="computed_rate" disabled id="computed_rate" required placeholder="Auto computed">
                        </div>
                        <div class="mb-3">
                            <label for="min_kg" class="form-label">Weight <span class="text-danger">*</span></label>
                            <input type="number" step="0.01" class="form-control" name="weight" onkeyup="calculateRate()" id="weight" required placeholder="Enter weight">
                        </div>
                    </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                            <button type="submit" class="btn btn-primary">Add</button>
                        </div>
                    </div>
            </div>
        </form>
    </div>

</div>

<script>
    var curr_page = 1;
    var per_page = 10;
    var max_page = 9999; // to be added dynamically

    var recyclables = [];
    window.addEventListener('load', function () {
        getData();
    });

    
    const nextPage = () => {
        if (curr_page < max_page) {
            curr_page += 1;
            getData(curr_page, per_page);
        }
    }
    const prevPage = () => {
        if (curr_page > 1) {
            curr_page -= 1;
            getData(curr_page, per_page);
        }
    }

    const calculateRate = () => {
        var weight = document.getElementById('weight').value;
        console.log(weight)
        if (weight < 0 ) {
            return;
        }
        var type_id = document.getElementById('recyclable_type_id').value
        console.log(type_id);
        var recyclable = recyclables.find((item,type_id) => item.id === type_id);
        console.log(recyclable.rate)
        if (recyclable) {
            document.getElementById('recyclable_type_id').value = weight * recyclable.rate
        }
    }
    const getData = (page = 1, per_page = 10) => {
        curr_page = page;
        this.per_page = per_page
        const formData = {
            search: document.getElementById('search').value,
            page: page,
            per_page: per_page,
        }
        const tableBody = document.getElementById("table_data");
        tableBody.innerHTML = ""
        axios.post('/RecyclableItems/GetData', formData)
        .then(function (response) {
            response.data.map((item, index) => {
                const row = document.createElement("tr");
                row.innerHTML = `
                <td>${((curr_page - 1) * per_page) + index + 1}</td>
                <td>${item.type_name}</td>
                <td>${item.computed_rate / item.weight}</td>
                <td>${item.weight}</td>
                <td>${item.computed_rate}</td>
                <td>${item.item_description}</td>
                <td class="text-center">
                    <button class="btn btn-success" onclick="getRecyclables(${item.id},'EditRecyclableItem')">Edit</button>
                    <button class="btn btn-danger" onclick="getRecyclables(${item.id},'DeleteRecyclableItem')">Delete</button>
                </td>
            `;
                tableBody.appendChild(row);
            });
        })
        .catch(function (error) {
            console.error('There was an error!', error);
            alert('Error creating the item.');
        });
    }

    const getRecyclablesData = (page = 1, per_page = 10) => {
        curr_page = page;
        this.per_page = per_page
        const formData = {
            search: document.getElementById('type_name').value,
            page: page,
            per_page: per_page,
        }
        recyclables.splice(0, recyclables.length);
        axios.post('/Recyclables/GetRecyclableData', formData)
        .then(function (response) {
            document.getElementById("recyclable_type_id").innerHTML = ""
            if (response.data.length) {
                const row = document.createElement("option");
                row.value = null
                row.innerHTML = "Select Recyclables"
                document.getElementById("recyclable_type_id").appendChild(row)
                response.data.map((item, index) => {
                    recyclables.push(item);
                    const row = document.createElement("option");
                    row.value = item.id
                    row.innerHTML = item.type_name + " ( " + item.rate + " ) "
                    document.getElementById("recyclable_type_id").appendChild(row)
                });
            } else {
                const row = document.createElement("option");
                row.value = null
                row.innerHTML = "NO DATA"
                document.getElementById("recyclable_type_id").appendChild(row)
            }
        })
        .catch(function (error) {
            console.error('There was an error!', error);
            alert('Error creating the item.');
        });
    }

    document.getElementById('createRecyclableItemForm').addEventListener('submit', function (event) {
        event.preventDefault();
        const formData = {
            recyclable_type_id: document.getElementById('recyclable_type_id').value,
            item_description: document.getElementById('item_description').value,
            weight: document.getElementById('weight').value
        };
        Swal.showLoading();
        axios.post('/RecyclableItems/Create', formData)
            .then(function (response) {
                Swal.close();
                if (response.data == "1") {
                    Swal.fire({
                        position: "center",
                        icon: "success",
                        title: "Successfully inserted!",
                        showConfirmButton: false,
                        timer: 1500
                    });
                    clear();
                } else {
                    Swal.fire({
                        position: "center",
                        icon: "warning",
                        title: response.data,
                        showConfirmButton: false,
                        timer: 1500
                    });
                }
            })
            .catch(function (error) {
                console.error('There was an error!', error);
                alert('Error creating the item.');
            });
    });
</script>
