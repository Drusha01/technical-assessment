
@model IEnumerable<technical_assessment.Models.Recyclables>

@{
    ViewBag.Title = "Index";
}

<h1 class="mt-3" id="recyclables">Recyclables</h1>
<div class="d-flex justify-content-start col-5" ><input type="text" onkeyup="getData()" class="form-control" name="type_name" id="search" required placeholder="Search ..."></div>
<div class="d-flex justify-content-end"><button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addRecyclables"> Add</button></div>
<table class="table table-responsive">
    <thead class="thead-dark">
        <tr>
            <th>#</th>
            <th>Type</th>
            <th>Rate</th>
            <th>Minimun KG</th>
            <th>Maximum KG</th>
            <th class="text-center">Action</th>
        </tr>
    </thead>
    <tbody id="table_data">
        
    </tbody>
</table>
<div class="col-2" id="pagination_label">
    showing: 1-10 of 100
</div>
<div class="d-flex justify-content-center gap-2">
    <button class="btn btn-outline-primary" onclick="prevPage()" id="prev_page"> Prev</button>
    <button class="btn btn-outline-primary" onclick="nextPage()" id="next_page"> Next</button>
</div>

<div>
    <div class="modal fade" id="addRecyclables" tabindex="-1" aria-labelledby="addRecyclablesLabel" aria-hidden="true">
        <form action="/" id="createRecyclablesForm" method="post">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="addRecyclablesLabel">Add Recyclables</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div class="mb-3">
                            <label for="type_name" class="form-label">Recyclable type <span class="text-danger">*</span></label>
                            <input type="text" class="form-control" name="type_name" id="type_name" required placeholder="Enter type name">
                        </div>
                        <div class="mb-3">
                            <label for="rate" class="form-label">Rate <span class="text-danger">*</span></label>
                            <input type="number" step="0.01" class="form-control" name="rate" id="rate" required placeholder="Enter rate">
                        </div>
                        <div class="mb-3">
                            <label for="min_kg" class="form-label">Min KG <span class="text-danger">*</span></label>
                            <input type="number" step="0.01" class="form-control" name="min_kg" id="min_kg" required placeholder="Enter min kg">
                        </div>
                        <div class="mb-3">
                            <label for="max_kg" class="form-label">Max KG <span class="text-danger">*</span></label>
                            <input type="number" step="0.01" class="form-control" name="max_kg" id="max_kg" required placeholder="Enter max kg">
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-primary">Add</button>
                    </div>
                </div>
            </div>
        </form>
    </div>
    <div class="modal fade" id="EditRecyclables" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <form action="/" id="updateRecyclablesForm" method="post">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="addRecyclablesLabel">Edit Recyclables</h5>
                            <button type="button" class="btn-close" id="edit_modal_btn_close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <div class="mb-3">
                                <input type="number" name="e_id" id="e_id" value="" class="d-none" />
                                <label for="type_name" class="form-label">Recyclable type <span class="text-danger">*</span></label>
                                <input type="text" class="form-control" name="type_name" id="e_type_name" required placeholder="Enter type name">
                            </div>
                            <div class="mb-3">
                                <label for="rate" class="form-label">Rate <span class="text-danger">*</span></label>
                                <input type="number" step="0.01" class="form-control" name="rate" id="e_rate" required placeholder="Enter rate">
                            </div>
                            <div class="mb-3">
                                <label for="min_kg" class="form-label">Min KG <span class="text-danger">*</span></label>
                                <input type="number" step="0.01" class="form-control" name="min_kg" id="e_min_kg" required placeholder="Enter min kg">
                            </div>
                            <div class="mb-3">
                                <label for="max_kg" class="form-label">Max KG <span class="text-danger">*</span></label>
                                <input type="number" step="0.01" class="form-control" name="max_kg" id="e_max_kg" required placeholder="Enter max kg">
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                            <button type="submit" class="btn btn-success">Save</button>
                        </div>
                    </div>
                </div>
            </form>
        </div>
    </div>

    <div class="modal fade" id="DeleteRecyclables" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <form action="/" id="deleteRecyclablesForm" method="post">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="addRecyclablesLabel">Delete Recyclables</h5>
                            <button type="button" class="btn-close" id="delete_modal_btn_close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <div class="mb-3">
                            </div>
                            <div class="text-center text-danger"> Are you sure you want to delete this?</div>
                            <div class="text-warning text-danger">Deleting this will also delete recyclable items associated with it!</div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                            <button type="submit" class="btn btn-danger">Delete</button>
                        </div>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
    var curr_page = 1;
    var per_page = 10;
    var max_page = 9999; // to be set dynamically
    document.getElementById('createRecyclablesForm').addEventListener('submit', function (event) {
        event.preventDefault();  
        const formData = {
            type_name: document.getElementById('type_name').value,
            rate: document.getElementById('rate').value,
            min_kg: document.getElementById('min_kg').value,
            max_kg: document.getElementById('max_kg').value
        };
        Swal.showLoading();
        axios.post('/Recyclables/Create', formData)
        .then(function (response) {
            Swal.close();
            if (response.data == "1") {
                Swal.fire({
                    position: "center",
                    icon: "success",
                    title: "Successfully inserted!",
                    showConfirmButton: false,
                    timer: 1500
                });
                clear();
                getData(curr_page, per_page);
            } else {
                Swal.fire({
                    position: "center",
                    icon: "warning",
                    title: response.data,
                    showConfirmButton: false,
                    timer: 1500
                });
            }
        })
        .catch(function (error) {
            console.error('There was an error!', error);
            alert('Error creating the item.');
        });
    });

    const clear = () => {
        document.getElementById('type_name').value = null;
        document.getElementById('rate').value = null;
        document.getElementById('min_kg').value = null;
        document.getElementById('max_kg').value = null;
    }

    window.addEventListener('load', function () {
        getData();
    });
    const getRecyclables = (id,modal_id) => {
        const formData = {
            id: id,
        }
        axios.post('/Recyclables/GetDetails', formData)
        .then(function (response) {
            response.data.map((item, index) => {
                document.getElementById('e_id').value = item.id;
                document.getElementById('e_type_name').value = item.type_name;
                document.getElementById('e_rate').value = item.rate;
                document.getElementById('e_min_kg').value = item.min_kg;
                document.getElementById('e_max_kg').value = item.max_kg;
                const modalElement = document.getElementById(modal_id);
                const modal = new bootstrap.Modal(modalElement);
                modal.show();
            });
        })
        .catch (function (error) {
            console.error('There was an error!', error);
            alert('Error creating the item.');
        });
    }
    const nextPage = () =>{
        if (curr_page < max_page) {
            curr_page += 1;
            getData(curr_page, per_page);
        }
    }
    const prevPage = () => {
        if (curr_page > 1) {
            curr_page -= 1;
            getData(curr_page, per_page);
        }
    }
    const getData = (page = 1, per_page = 10) => {
        curr_page = page;
        this.per_page = per_page
        console.log(document.getElementById('search').value)
        const formData = {
            search: document.getElementById('search').value,
            page: page,
            per_page:per_page,
        }
        const tableBody = document.getElementById("table_data");
        tableBody.innerHTML = ""
        axios.post('/Recyclables/GetData', formData)
        .then(function (response) {
            response.data.map((item, index) => {
                const row = document.createElement("tr");
                row.innerHTML = `
                    <td>${((curr_page - 1) * per_page) + index + 1}</td>
                    <td>${item.type_name}</td>
                    <td>${item.rate}</td>
                    <td>${item.min_kg}</td>
                    <td>${item.max_kg}</td>
                    <td class="text-center">
                        <button class="btn btn-success" onclick="getRecyclables(${item.id},'EditRecyclables')">Edit</button>
                        <button class="btn btn-danger" onclick="getRecyclables(${item.id},'DeleteRecyclables')">Delete</button>
                    </td>
                `;
                tableBody.appendChild(row);
            });
        })
        .catch (function (error) {
            console.error('There was an error!', error);
            alert('Error creating the item.');
        });
    }


    document.getElementById('updateRecyclablesForm').addEventListener('submit', function (event) {
        event.preventDefault();
        const formData = {
            id: document.getElementById('e_id').value,
            type_name: document.getElementById('e_type_name').value,
            rate: document.getElementById('e_rate').value,
            min_kg: document.getElementById('e_min_kg').value,
            max_kg: document.getElementById('e_max_kg').value
        };
        Swal.showLoading();
        axios.post('/Recyclables/Update', formData)
        .then(function (response) {
            Swal.close();
            if (response.data == "1") {
                Swal.fire({
                    position: "center",
                    icon: "success",
                    title: "Successfully updated!",
                    showConfirmButton: false,
                    timer: 1500
                });
                document.getElementById('edit_modal_btn_close').click()
                getData(curr_page, per_page);
            } else {
                Swal.fire({
                    position: "center",
                    icon: "warning",
                    title: response.data,
                    showConfirmButton: false,
                    timer: 1500
                });
            }
        })
        .catch(function (error) {
            console.error('There was an error!', error);
            alert('Error creating the item.');
        });
    });

    document.getElementById('deleteRecyclablesForm').addEventListener('submit', function (event) {
        event.preventDefault();
        const formData = {
            id: document.getElementById('e_id').value,
        };
        Swal.showLoading();
        axios.post('/Recyclables/Delete', formData)
            .then(function (response) {
                Swal.close();
                if (response.data == "1") {
                    Swal.fire({
                        position: "center",
                        icon: "success",
                        title: "Successfully deleted!",
                        showConfirmButton: false,
                        timer: 1500
                    });
                    document.getElementById('delete_modal_btn_close').click()
                    getData(curr_page, per_page);
                } else {
                    Swal.fire({
                        position: "center",
                        icon: "warning",
                        title: response.data,
                        showConfirmButton: false,
                        timer: 1500
                    });
                }
            })
            .catch(function (error) {
                console.error('There was an error!', error);
                alert('Error creating the item.');
            });
    });
</script>